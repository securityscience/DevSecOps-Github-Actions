## ‚úÖ Step-by-Step OAuth 2.0 Flow

### üîπ 1. **Authorization Request** (User logs in via browser redirect)

**Request:**

```http
GET /authorize?
  response_type=code&
  client_id=your-client-id&
  redirect_uri=https%3A%2F%2Fclient.example.com%2Fcallback&
  scope=read%20write&
  state=xyz123
HTTP/1.1
Host: authorization-server.example.com
```

**Explanation:**

* `response_type=code`: Indicates authorization code flow
* `client_id`: Public client identifier
* `redirect_uri`: Where the auth server redirects after user approves
* `scope`: What access is requested (e.g., `read`, `write`, `openid`)
* `state`: Protects against CSRF (should be returned back to client)

---

### üîπ 2. **Authorization Response** (User approves ‚Üí redirect back with code)

**Redirect to Client:**

```
HTTP/1.1 302 Found
Location: https://client.example.com/callback?code=SplxlOBeZQQYbYS6WxSbIA&state=xyz123
```

* The client receives the **authorization code** (e.g., `SplxlOBeZQQYbYS6WxSbIA`)

---

### üîπ 3. **Token Request** (Client sends code to get access token)

**Request:**

```http
POST /token HTTP/1.1
Host: authorization-server.example.com
Content-Type: application/x-www-form-urlencoded
Authorization: Basic eW91ci1jbGllbnQtaWQ6eW91ci1zZWNyZXQ=

grant_type=authorization_code&
code=SplxlOBeZQQYbYS6WxSbIA&
redirect_uri=https%3A%2F%2Fclient.example.com%2Fcallback
```

> üîê Note: `Authorization` header uses **HTTP Basic Auth** with client ID and secret.

---

### üîπ 4. **Token Response**

**Response:**

```json
{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "refresh_token": "tGzv3JOkF0XG5Qx2TlKWIA"
}
```

**Fields:**

* `access_token`: The token used to access protected resources
* `token_type`: Usually `Bearer`
* `expires_in`: Token lifetime in seconds
* `refresh_token`: Optional, used to get a new access token

---

### Optional:

If you use **OpenID Connect** (`scope=openid`), the response may also include an `id_token`.

* PKCE example (for public/mobile clients)
* Client Credentials Flow (machine-to-machine)
* Refresh token request/response
